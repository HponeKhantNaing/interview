[
  {"question": "What is the difference between CI and CD?","answer": "CI (Continuous Integration) automatically builds and tests code changes, while CD (Continuous Delivery/Deployment) automatically deploys code to production. CI focuses on code quality and testing, while CD focuses on reliable and frequent deployments.","topics": ["ci", "cd", "devops", "continuous integration", "continuous deployment"]},
  {"question": "Explain the concept of Docker containers and their benefits.","answer": "Docker containers package applications with their dependencies in isolated environments. Benefits include consistency across environments, faster deployment, resource efficiency, and easier scaling. Containers are lightweight compared to virtual machines and provide better isolation.","topics": ["docker", "containers", "devops", "deployment"]},
  {"question": "What is the difference between Docker and Kubernetes?","answer": "Docker creates and runs containers, while Kubernetes orchestrates and manages multiple containers across clusters. Docker is for containerization, while Kubernetes is for container orchestration, scaling, and service discovery.","topics": ["docker", "kubernetes", "containers", "orchestration", "devops"]},
  {"question": "Explain the concept of Infrastructure as Code (IaC).","answer": "IaC manages infrastructure using code and configuration files instead of manual processes. Tools like Terraform, CloudFormation, and Ansible automate infrastructure provisioning. Benefits include version control, consistency, and faster deployment.","topics": ["iac", "infrastructure as code", "terraform", "devops"]},
  {"question": "What is the difference between blue-green deployment and rolling deployment?","answer": "Blue-green deployment switches traffic between two identical environments, while rolling deployment updates instances gradually. Blue-green is faster but requires double resources, while rolling deployment is more resource-efficient but takes longer.","topics": ["deployment", "blue-green", "rolling", "devops"]},
  {"question": "Explain the concept of monitoring and logging in DevOps.","answer": "Monitoring tracks system performance and health in real-time, while logging records events and activities for analysis. Tools include Prometheus, Grafana, ELK Stack, and Splunk. Both are essential for maintaining system reliability and troubleshooting issues.","topics": ["monitoring", "logging", "devops", "observability"]},
  {"question": "What is the difference between horizontal and vertical scaling?","answer": "Horizontal scaling adds more machines to handle increased load, while vertical scaling adds more resources (CPU, RAM) to existing machines. Horizontal scaling is more scalable and fault-tolerant, while vertical scaling is simpler but has hardware limits.","topics": ["horizontal scaling", "vertical scaling", "devops", "scalability"]},
  {"question": "Explain the concept of Git workflows and branching strategies.","answer": "Git workflows define how teams collaborate on code. Common strategies include Git Flow (feature branches), GitHub Flow (simple branching), and trunk-based development. Each has different rules for branching, merging, and release management.","topics": ["git", "workflows", "branching", "devops", "version control"]},
  {"question": "What is the difference between microservices and monolithic architecture?","answer": "Monolithic architecture has all components in a single application, while microservices break the application into small, independent services. Monoliths are simpler to develop and deploy but harder to scale, while microservices are more complex but offer better scalability.","topics": ["microservices", "monolithic", "architecture", "devops"]},
  {"question": "Explain the concept of cloud computing and its service models.","answer": "Cloud computing provides computing resources over the internet. Service models include IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service). Each model provides different levels of abstraction and management.","topics": ["cloud computing", "iaas", "paas", "saas", "devops"]},
  {"question": "What is the difference between AWS, Azure, and Google Cloud?","answer": "AWS, Azure, and Google Cloud are major cloud providers offering similar services but with different strengths. AWS has the largest market share and service variety, Azure integrates well with Microsoft products, and Google Cloud excels in AI/ML and data analytics.","topics": ["aws", "azure", "google cloud", "cloud providers", "devops"]},
  {"question": "Explain the concept of serverless computing.","answer": "Serverless computing allows running code without managing servers. Functions are executed on-demand and automatically scaled. Benefits include reduced operational overhead, pay-per-use pricing, and automatic scaling. Popular platforms include AWS Lambda, Azure Functions, and Google Cloud Functions.","topics": ["serverless", "lambda", "functions", "devops", "cloud"]},
  {"question": "What is the difference between configuration management and orchestration?","answer": "Configuration management tools (like Ansible, Chef, Puppet) automate server setup and configuration, while orchestration tools (like Kubernetes, Docker Swarm) manage container deployment and scaling. Configuration management focuses on server state, orchestration focuses on application deployment.","topics": ["configuration management", "orchestration", "ansible", "kubernetes", "devops"]},
  {"question": "Explain the concept of security in DevOps (DevSecOps).","answer": "DevSecOps integrates security into the DevOps pipeline. It includes automated security testing, vulnerability scanning, and compliance checks. Security should be built into every stage of development, not added as an afterthought.","topics": ["devsecops", "security", "devops", "automation"]},
  {"question": "What is the difference between load balancer and reverse proxy?","answer": "Load balancer distributes traffic across multiple servers for high availability, while reverse proxy forwards requests to backend servers and can provide caching, SSL termination, and security. Both improve performance and reliability but serve different purposes.","topics": ["load balancer", "reverse proxy", "nginx", "devops", "networking"]},
  {"question": "Explain the concept of container orchestration with Kubernetes.","answer": "Kubernetes automates container deployment, scaling, and management. It provides features like service discovery, load balancing, storage orchestration, and automated rollouts. Kubernetes is the de facto standard for container orchestration in production environments.","topics": ["kubernetes", "container orchestration", "devops", "deployment"]},
  {"question": "What is the difference between virtual machines and containers?","answer": "Virtual machines include a full OS and run on a hypervisor, while containers share the host OS kernel and are more lightweight. Containers start faster, use less resources, and are more portable, while VMs provide better isolation and security.","topics": ["virtual machines", "containers", "docker", "devops", "virtualization"]},
  {"question": "Explain the concept of automated testing in CI/CD.","answer": "Automated testing in CI/CD includes unit tests, integration tests, and end-to-end tests that run automatically on code changes. It ensures code quality and prevents bugs from reaching production. Testing should be fast, reliable, and comprehensive.","topics": ["automated testing", "ci/cd", "devops", "quality assurance"]},
  {"question": "What is the difference between staging and production environments?","answer": "Staging environment mirrors production for testing before deployment, while production environment serves real users. Staging allows testing changes safely, while production requires high availability and performance. Both should be as similar as possible.","topics": ["staging", "production", "environments", "devops", "deployment"]},
  {"question": "Explain the concept of disaster recovery and backup strategies.","answer": "Disaster recovery ensures business continuity after system failures. Strategies include regular backups, redundant systems, and recovery procedures. RTO (Recovery Time Objective) and RPO (Recovery Point Objective) define acceptable downtime and data loss limits.","topics": ["disaster recovery", "backup", "rto", "rpo", "devops"]}
] 
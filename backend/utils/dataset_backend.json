[
  {"question": "What is REST and how does it differ from SOAP?","answer": "REST (Representational State Transfer) is an architectural style for designing networked applications. SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information. REST uses HTTP and is stateless, while SOAP is more rigid and uses XML.","topics": ["rest", "soap", "api"]},
  {"question": "Explain the concept of middleware in Express.js.","answer": "Middleware functions in Express.js are functions that have access to the request and response objects. They can execute code, modify the request/response, end the request-response cycle, or call the next middleware in the stack.","topics": ["express", "middleware", "node.js"]},
  {"question": "What is the difference between SQL and NoSQL databases?","answer": "SQL databases are relational and use structured query language for defining and manipulating data. NoSQL databases are non-relational, can store unstructured data, and are more scalable for certain use cases.","topics": ["sql", "nosql", "database"]},
  {"question": "What is a connection pool and why is it important?","answer": "A connection pool is a cache of database connections maintained so that connections can be reused when future requests to the database are required. It improves performance and resource utilization.","topics": ["database", "connection pool"]},
  {"question": "How do you handle authentication in a REST API?","answer": "Authentication in REST APIs is commonly handled using tokens (like JWT), OAuth, or API keys. The server validates the token or key on each request.","topics": ["authentication", "rest", "jwt"]},
  {"question": "What is the purpose of environment variables in backend development?","answer": "Environment variables are used to store configuration values outside the codebase, such as API keys, database URIs, and secrets, making the application more secure and configurable.","topics": ["environment variables", "config"]},
  {"question": "Explain the event loop in Node.js.","answer": "The event loop is a mechanism in Node.js that handles asynchronous callbacks. It allows Node.js to perform non-blocking I/O operations by offloading operations to the system kernel whenever possible.","topics": ["node.js", "event loop"]},
  {"question": "What is CORS and how do you handle it?","answer": "CORS (Cross-Origin Resource Sharing) is a security feature that restricts web pages from making requests to a different domain. It is handled by setting appropriate headers on the server.","topics": ["cors", "security"]},
  {"question": "How do you implement file uploads in a Node.js backend?","answer": "File uploads in Node.js are commonly handled using middleware like multer, which parses multipart/form-data and stores files on disk or in memory.","topics": ["file upload", "node.js", "multer"]},
  {"question": "What is the difference between process.env and config files?","answer": "process.env is used to access environment variables at runtime, while config files are static files that store configuration values. Environment variables are more secure for sensitive data.","topics": ["process.env", "config"]},
  {"question": "Explain the use of indexes in databases.","answer": "Indexes improve the speed of data retrieval operations on a database table at the cost of additional space and slower writes.","topics": ["database", "index"]},
  {"question": "What is a transaction in SQL?","answer": "A transaction is a sequence of database operations that are treated as a single unit. Transactions ensure data integrity using ACID properties.","topics": ["sql", "transaction", "acid"]},
  {"question": "How do you secure sensitive data in a backend application?","answer": "Sensitive data is secured using encryption, hashing, environment variables, and secure protocols like HTTPS.","topics": ["security", "encryption", "https"]},
  {"question": "What is the difference between synchronous and asynchronous code?","answer": "Synchronous code is executed sequentially, blocking the thread until completion. Asynchronous code allows other operations to run while waiting for a task to complete.","topics": ["synchronous", "asynchronous"]},
  {"question": "How do you handle errors in Express.js?","answer": "Errors in Express.js are handled using error-handling middleware, which takes four arguments (err, req, res, next) and sends appropriate responses.","topics": ["express", "error handling"]},
  {"question": "What is a microservice architecture?","answer": "Microservice architecture is a design pattern where an application is composed of small, independent services that communicate over APIs.","topics": ["microservices", "architecture"]},
  {"question": "Explain the use of Redis in backend systems.","answer": "Redis is an in-memory data store used for caching, session management, and real-time analytics due to its speed and support for various data structures.","topics": ["redis", "cache", "session"]},
  {"question": "What is API rate limiting and why is it important?","answer": "API rate limiting restricts the number of requests a client can make to an API in a given time period, protecting against abuse and ensuring fair usage.","topics": ["api", "rate limiting"]},
  {"question": "How do you implement logging in a Node.js application?","answer": "Logging in Node.js can be implemented using libraries like Winston or Morgan to record requests, errors, and other events for monitoring and debugging.","topics": ["logging", "node.js", "winston"]},
  {"question": "What is the difference between PUT and PATCH HTTP methods?","answer": "PUT replaces the entire resource with the provided data, while PATCH updates only the specified fields of a resource.","topics": ["http", "put", "patch"]},
  {"question": "How do you handle background jobs in backend systems?","answer": "Background jobs are handled using job queues and workers, with libraries like Bull or Agenda in Node.js, to process tasks asynchronously.","topics": ["background jobs", "queue", "bull"]}
] 
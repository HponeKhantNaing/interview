[
  {"question": "What is the difference between JDK, JRE, and JVM?","answer": "JVM (Java Virtual Machine) is the runtime environment that executes Java bytecode. JRE (Java Runtime Environment) includes JVM and libraries needed to run Java applications. JDK (Java Development Kit) includes JRE plus development tools like compiler and debugger.","topics": ["java", "jvm", "jre", "jdk"]},
  {"question": "Explain the difference between == and equals() in Java.","answer": "== compares object references (memory addresses), while equals() compares the actual content/values of objects. For String objects, equals() compares the character sequence, while == checks if they point to the same memory location.","topics": ["java", "comparison", "equals", "string"]},
  {"question": "What is the difference between HashMap and HashTable?","answer": "HashMap is not synchronized and allows null keys/values, while HashTable is synchronized and doesn't allow null keys/values. HashMap is generally preferred for better performance in non-threaded applications.","topics": ["java", "hashmap", "hashtable", "collections"]},
  {"question": "Explain the concept of method overloading and overriding.","answer": "Method overloading occurs when multiple methods have the same name but different parameters in the same class. Method overriding occurs when a subclass provides a specific implementation of a method defined in its parent class.","topics": ["java", "overloading", "overriding", "polymorphism"]},
  {"question": "What is the difference between abstract class and interface?","answer": "Abstract classes can have both abstract and concrete methods, while interfaces can only have abstract methods (before Java 8). A class can extend only one abstract class but implement multiple interfaces.","topics": ["java", "abstract class", "interface", "inheritance"]},
  {"question": "Explain the concept of garbage collection in Java.","answer": "Garbage collection automatically reclaims memory from objects that are no longer referenced. The JVM handles this process, and developers don't need to manually free memory. Different garbage collectors are available for different use cases.","topics": ["java", "garbage collection", "memory management"]},
  {"question": "What are the different types of exceptions in Java?","answer": "Java has checked exceptions (must be handled or declared) and unchecked exceptions (RuntimeException and its subclasses). Checked exceptions represent recoverable conditions, while unchecked exceptions represent programming errors.","topics": ["java", "exceptions", "error handling"]},
  {"question": "Explain the concept of threads in Java.","answer": "Threads are lightweight processes that allow concurrent execution. Java provides Thread class and Runnable interface for creating threads. Threads share the same memory space and can communicate through shared variables.","topics": ["java", "threads", "concurrency", "multithreading"]},
  {"question": "What is the difference between String, StringBuilder, and StringBuffer?","answer": "String is immutable, StringBuilder is mutable and not thread-safe, while StringBuffer is mutable and thread-safe. StringBuilder is preferred for single-threaded applications due to better performance.","topics": ["java", "string", "stringbuilder", "stringbuffer"]},
  {"question": "Explain the concept of generics in Java.","answer": "Generics provide type safety by allowing classes and methods to work with different data types while maintaining compile-time type checking. They help eliminate the need for casting and provide better code reusability.","topics": ["java", "generics", "type safety"]},
  {"question": "What is the difference between ArrayList and LinkedList?","answer": "ArrayList is backed by an array and provides fast random access but slower insertions/deletions. LinkedList is backed by a doubly-linked list and provides fast insertions/deletions but slower random access.","topics": ["java", "arraylist", "linkedlist", "collections"]},
  {"question": "Explain the concept of dependency injection.","answer": "Dependency injection is a design pattern where dependencies are provided to a class rather than the class creating them itself. This promotes loose coupling and makes code more testable and maintainable.","topics": ["java", "dependency injection", "design patterns"]},
  {"question": "What is the difference between final, finally, and finalize?","answer": "final is a keyword used to make variables, methods, or classes immutable/unchangeable. finally is a block that always executes after try-catch. finalize is a method called by garbage collector before destroying an object.","topics": ["java", "final", "finally", "finalize"]},
  {"question": "Explain the concept of annotations in Java.","answer": "Annotations provide metadata about code and can be processed at compile time or runtime. They start with @ symbol and are used for documentation, compilation instructions, and runtime processing.","topics": ["java", "annotations", "metadata"]},
  {"question": "What is the difference between synchronized and volatile?","answer": "synchronized provides mutual exclusion and visibility guarantees, while volatile only provides visibility guarantees. synchronized can be used on methods or blocks, while volatile is used on variables.","topics": ["java", "synchronized", "volatile", "threading"]},
  {"question": "Explain the concept of lambda expressions in Java.","answer": "Lambda expressions are anonymous functions that can be used to implement functional interfaces. They provide a concise way to write code and are a key feature of Java 8's functional programming capabilities.","topics": ["java", "lambda expressions", "functional programming"]},
  {"question": "What is the difference between Comparable and Comparator?","answer": "Comparable is implemented by the class itself and provides natural ordering, while Comparator is implemented separately and can provide multiple different ordering strategies for the same class.","topics": ["java", "comparable", "comparator", "sorting"]},
  {"question": "Explain the concept of reflection in Java.","answer": "Reflection allows a program to examine and modify its own structure at runtime. It can be used to inspect classes, methods, fields, and create objects dynamically.","topics": ["java", "reflection", "runtime"]},
  {"question": "What is the difference between checked and unchecked exceptions?","answer": "Checked exceptions must be explicitly handled or declared, while unchecked exceptions (RuntimeException and its subclasses) don't require explicit handling. Checked exceptions represent recoverable conditions.","topics": ["java", "exceptions", "checked", "unchecked"]},
  {"question": "Explain the concept of serialization in Java.","answer": "Serialization is the process of converting an object into a byte stream for storage or transmission. Deserialization is the reverse process. The Serializable interface marks classes that can be serialized.","topics": ["java", "serialization", "deserialization"]},
  {"question": "What is the difference between wait() and sleep()?","answer": "wait() is a method of Object class that releases the lock and waits for notification, while sleep() is a static method of Thread class that pauses execution without releasing the lock.","topics": ["java", "wait", "sleep", "threading"]}
] 
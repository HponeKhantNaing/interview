[
  {"question": "What is the difference between Python's list and tuple?","answer": "Lists are mutable (can be modified after creation) and use square brackets []. Tuples are immutable (cannot be modified) and use parentheses (). Lists are used for collections that change, while tuples are used for fixed collections and as dictionary keys.","topics": ["python", "lists", "tuples", "mutable", "immutable"]},
  {"question": "Explain the concept of decorators in Python.","answer": "Decorators are functions that modify the behavior of other functions. They use the @ syntax and are commonly used for logging, authentication, caching, and validation. Decorators can accept arguments and can be chained together.","topics": ["python", "decorators", "functions", "syntax"]},
  {"question": "What is the difference between == and === in JavaScript?","answer": "== performs type coercion before comparison, while === (strict equality) compares both value and type without coercion. === is generally preferred as it's more predictable and prevents unexpected type conversions.","topics": ["javascript", "comparison", "type coercion", "equality"]},
  {"question": "Explain the concept of closures in JavaScript.","answer": "A closure is a function that has access to variables in its outer scope even after the outer function has returned. Closures are used for data privacy, currying, and maintaining state in functional programming.","topics": ["javascript", "closures", "scope", "functional programming"]},
  {"question": "What is the difference between let, const, and var in JavaScript?","answer": "var is function-scoped and hoisted, let is block-scoped and not hoisted, const is block-scoped and cannot be reassigned. let and const were introduced in ES6 to fix var's scoping issues.","topics": ["javascript", "es6", "scope", "hoisting", "variables"]},
  {"question": "Explain the concept of interfaces in TypeScript.","answer": "Interfaces define the structure of objects and provide type checking. They can include properties, methods, and optional properties. Interfaces support inheritance and can be used to ensure objects conform to a specific contract.","topics": ["typescript", "interfaces", "type checking", "object-oriented"]},
  {"question": "What is the difference between pass by value and pass by reference in Java?","answer": "Java passes primitives by value (a copy is made) and objects by reference (the reference is copied, but both point to the same object). Changes to object properties are visible to the caller, but reassigning the parameter doesn't affect the original reference.","topics": ["java", "pass by value", "pass by reference", "primitives", "objects"]},
  {"question": "Explain the concept of generics in Java.","answer": "Generics provide type safety by allowing classes and methods to work with different data types while maintaining compile-time type checking. They help eliminate the need for casting and provide better code reusability.","topics": ["java", "generics", "type safety", "collections"]},
  {"question": "What is the difference between malloc and new in C++?","answer": "malloc is a C function that allocates memory but doesn't call constructors, while new is a C++ operator that allocates memory and calls constructors. new is type-safe and can be overloaded, while malloc requires manual type casting.","topics": ["c++", "memory management", "malloc", "new", "constructors"]},
  {"question": "Explain the concept of templates in C++.","answer": "Templates allow writing generic code that works with different data types. Function templates and class templates enable code reuse without sacrificing type safety. Templates are resolved at compile time through template instantiation.","topics": ["c++", "templates", "generic programming", "compile time"]},
  {"question": "What is the difference between slices and arrays in Go?","answer": "Arrays have fixed size and are value types, while slices are dynamic and reference types. Slices are built on top of arrays and provide a more flexible interface. Slices can grow and shrink as needed.","topics": ["go", "slices", "arrays", "dynamic", "fixed size"]},
  {"question": "Explain the concept of goroutines in Go.","answer": "Goroutines are lightweight threads managed by the Go runtime. They're created with the 'go' keyword and can run concurrently. Goroutines are much cheaper than OS threads and are managed by Go's scheduler.","topics": ["go", "goroutines", "concurrency", "threads"]},
  {"question": "What is the difference between symbols and strings in Ruby?","answer": "Symbols are immutable identifiers prefixed with :, while strings are mutable and enclosed in quotes. Symbols are used as keys in hashes and method names because they're more memory efficient and faster to compare than strings.","topics": ["ruby", "symbols", "strings", "immutable", "mutable"]},
  {"question": "Explain the concept of blocks in Ruby.","answer": "Blocks are chunks of code that can be passed to methods using do...end or curly braces. They're a key feature of Ruby's iterators and enable powerful functional programming patterns. Blocks can accept parameters and can be converted to Proc objects.","topics": ["ruby", "blocks", "iterators", "functional programming"]},
  {"question": "What is the difference between synchronous and asynchronous programming?","answer": "Synchronous code executes sequentially, blocking until each operation completes. Asynchronous code allows other operations to run while waiting for I/O or network requests. Asynchronous programming improves performance and responsiveness.","topics": ["programming", "synchronous", "asynchronous", "performance"]},
  {"question": "Explain the concept of error handling in different languages.","answer": "Languages handle errors differently: Java uses try-catch with checked exceptions, Python uses try-except, JavaScript uses try-catch, and Go uses explicit error return values. Each approach has trade-offs between safety and verbosity.","topics": ["error handling", "exceptions", "try-catch", "programming languages"]},
  {"question": "What is the difference between static and dynamic typing?","answer": "Static typing checks types at compile time (Java, C++), while dynamic typing checks types at runtime (Python, JavaScript). Static typing catches errors earlier but requires more code, while dynamic typing is more flexible but can hide errors.","topics": ["static typing", "dynamic typing", "type checking", "programming languages"]},
  {"question": "Explain the concept of memory management in different languages.","answer": "C/C++ require manual memory management with malloc/free or new/delete. Java uses garbage collection. Python uses reference counting and garbage collection. Go uses garbage collection. Each approach has different performance characteristics and developer experience.","topics": ["memory management", "garbage collection", "manual memory", "programming languages"]},
  {"question": "What is the difference between compiled and interpreted languages?","answer": "Compiled languages (C++, Java) are translated to machine code before execution, while interpreted languages (Python, JavaScript) are executed line by line. Compiled languages are generally faster, while interpreted languages offer more flexibility and faster development.","topics": ["compiled", "interpreted", "execution", "programming languages"]},
  {"question": "Explain the concept of functional programming features.","answer": "Functional programming features include first-class functions, immutability, pure functions, and higher-order functions. Languages like Haskell are purely functional, while others like JavaScript and Python support functional programming paradigms.","topics": ["functional programming", "first-class functions", "immutability", "pure functions"]}
] 
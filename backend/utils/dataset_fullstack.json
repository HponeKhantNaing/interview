[
  {"question": "What is server-side rendering and why is it important?","answer": "Server-side rendering (SSR) is the process of rendering web pages on the server instead of the client. It improves SEO and initial load performance.","topics": ["ssr", "seo", "performance"]},
  {"question": "How do you manage state in a large React application?","answer": "State in large React applications can be managed using libraries like Redux, MobX, or React Context API, depending on the complexity and requirements.","topics": ["react", "state management", "redux"]},
  {"question": "Explain the concept of RESTful APIs and how you would consume them in a frontend app.","answer": "RESTful APIs follow REST principles and are accessed via HTTP methods. In frontend apps, you can use fetch, axios, or other libraries to make HTTP requests to these APIs.","topics": ["rest", "api", "frontend"]},
  {"question": "What is JWT and how is it used in authentication?","answer": "JWT (JSON Web Token) is a compact, URL-safe means of representing claims to be transferred between two parties. It's commonly used for authentication in web applications.","topics": ["jwt", "authentication"]},
  {"question": "How do you implement role-based access control in a web app?","answer": "Role-based access control is implemented by assigning roles to users and restricting access to resources based on those roles.","topics": ["rbac", "access control"]},
  {"question": "What is the difference between SSR and CSR?","answer": "SSR (Server-Side Rendering) renders content on the server, while CSR (Client-Side Rendering) renders content in the browser. SSR improves SEO and initial load time.","topics": ["ssr", "csr"]},
  {"question": "How do you handle file uploads in a fullstack app?","answer": "File uploads are handled by sending files from the frontend to the backend using multipart/form-data, and storing them on the server or cloud storage.","topics": ["file upload", "fullstack"]},
  {"question": "What is GraphQL and how does it differ from REST?","answer": "GraphQL is a query language for APIs that allows clients to request only the data they need. Unlike REST, it uses a single endpoint and supports flexible queries.","topics": ["graphql", "rest", "api"]},
  {"question": "How do you secure a fullstack application?","answer": "Security in fullstack apps involves using HTTPS, validating input, sanitizing data, using authentication and authorization, and keeping dependencies updated.","topics": ["security", "fullstack"]},
  {"question": "What is CORS and how do you handle it in a fullstack app?","answer": "CORS (Cross-Origin Resource Sharing) is handled by setting appropriate headers on the backend to allow or restrict requests from different origins.","topics": ["cors", "fullstack"]},
  {"question": "How do you implement pagination in a fullstack app?","answer": "Pagination is implemented by limiting the number of results returned from the backend and providing controls on the frontend to navigate pages.","topics": ["pagination", "fullstack"]},
  {"question": "What is a monorepo and what are its benefits?","answer": "A monorepo is a single repository containing multiple projects. It simplifies dependency management and code sharing.","topics": ["monorepo", "fullstack"]},
  {"question": "How do you handle real-time updates in a fullstack app?","answer": "Real-time updates are handled using WebSockets, libraries like Socket.io, or services like Firebase Realtime Database.","topics": ["realtime", "websockets", "socket.io"]},
  {"question": "What is the difference between SQL and NoSQL databases?","answer": "SQL databases are relational and use structured query language, while NoSQL databases are non-relational and can store unstructured data.","topics": ["sql", "nosql", "database"]},
  {"question": "How do you deploy a fullstack application?","answer": "Deployment involves building the frontend, setting up the backend server, configuring environment variables, and deploying to a platform like Heroku, AWS, or Vercel.","topics": ["deployment", "fullstack"]},
  {"question": "What is Docker and how is it used in fullstack development?","answer": "Docker is a platform for containerizing applications, making them portable and consistent across environments.","topics": ["docker", "fullstack"]},
  {"question": "How do you implement authentication in a fullstack app?","answer": "Authentication is implemented by verifying user credentials on the backend and managing sessions or tokens on the frontend.","topics": ["authentication", "fullstack"]},
  {"question": "What is Redux and how is it used in fullstack apps?","answer": "Redux is a state management library often used in React apps to manage global state, which can be synchronized with backend data.","topics": ["redux", "state management"]},
  {"question": "How do you handle errors in a fullstack application?","answer": "Errors are handled by validating input, using try/catch blocks, and sending appropriate error responses from the backend to the frontend.","topics": ["error handling", "fullstack"]},
  {"question": "What is continuous integration and continuous deployment (CI/CD)?","answer": "CI/CD is a set of practices that automate the process of integrating code changes, testing, and deploying applications.","topics": ["ci/cd", "devops"]},
  {"question": "How do you test a fullstack application?","answer": "Testing is done using unit tests, integration tests, and end-to-end tests, often with tools like Jest, Mocha, and Cypress.","topics": ["testing", "fullstack"]}
] 
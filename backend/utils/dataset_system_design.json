[
  {"question": "What is the difference between monolithic and microservices architecture?","answer": "Monolithic architecture has all components in a single application, while microservices break the application into small, independent services. Monoliths are simpler to develop and deploy but harder to scale, while microservices are more complex but offer better scalability and fault isolation.","topics": ["system design", "monolithic", "microservices", "architecture"]},
  {"question": "Explain the concept of load balancing and its types.","answer": "Load balancing distributes incoming requests across multiple servers to improve performance and reliability. Types include round-robin, least connections, IP hash, and weighted round-robin. Load balancers can be hardware-based or software-based (like Nginx, HAProxy).","topics": ["load balancing", "system design", "scalability", "performance"]},
  {"question": "What is the CAP theorem and its implications?","answer": "The CAP theorem states that a distributed system can only guarantee two out of three properties: Consistency (all nodes see the same data), Availability (every request receives a response), and Partition tolerance (system continues despite network failures). Most systems choose AP or CP based on requirements.","topics": ["cap theorem", "distributed systems", "consistency", "availability"]},
  {"question": "Explain the concept of database sharding.","answer": "Database sharding horizontally partitions data across multiple databases or servers. It improves performance and scalability by distributing load. Sharding strategies include range-based, hash-based, and directory-based. Challenges include complex queries and data distribution.","topics": ["database sharding", "scalability", "system design", "performance"]},
  {"question": "What is the difference between horizontal and vertical scaling?","answer": "Horizontal scaling adds more machines to handle increased load, while vertical scaling adds more resources (CPU, RAM) to existing machines. Horizontal scaling is more scalable and fault-tolerant, while vertical scaling is simpler but has hardware limits.","topics": ["horizontal scaling", "vertical scaling", "system design", "scalability"]},
  {"question": "Explain the concept of caching strategies.","answer": "Caching stores frequently accessed data in fast memory to improve performance. Strategies include write-through (write to cache and database), write-back (write to cache first), and cache-aside (application manages cache). Popular caching systems include Redis and Memcached.","topics": ["caching", "performance", "system design", "redis"]},
  {"question": "What is the difference between synchronous and asynchronous communication?","answer": "Synchronous communication waits for a response before proceeding, while asynchronous communication doesn't wait and handles responses later. Synchronous is simpler but can block, while asynchronous is more complex but provides better performance and scalability.","topics": ["synchronous", "asynchronous", "communication", "system design"]},
  {"question": "Explain the concept of message queues and their benefits.","answer": "Message queues enable asynchronous communication between services. They provide decoupling, reliability, and scalability. Popular message queues include RabbitMQ, Apache Kafka, and Amazon SQS. Benefits include fault tolerance, load balancing, and guaranteed message delivery.","topics": ["message queues", "asynchronous", "system design", "kafka", "rabbitmq"]},
  {"question": "What is the difference between SQL and NoSQL databases?","answer": "SQL databases are relational and use structured query language, while NoSQL databases are non-relational and can store unstructured data. SQL is better for complex queries and ACID compliance, while NoSQL is better for scalability and flexibility.","topics": ["sql", "nosql", "databases", "system design"]},
  {"question": "Explain the concept of API Gateway pattern.","answer": "An API Gateway acts as a single entry point for client requests, routing them to appropriate services. It handles authentication, rate limiting, logging, and request/response transformation. API Gateways improve security, monitoring, and client experience.","topics": ["api gateway", "system design", "microservices", "architecture"]},
  {"question": "What is the difference between stateless and stateful services?","answer": "Stateless services don't store client data between requests, while stateful services maintain client state. Stateless services are easier to scale and more fault-tolerant, while stateful services can provide better performance for complex operations.","topics": ["stateless", "stateful", "system design", "scalability"]},
  {"question": "Explain the concept of circuit breaker pattern.","answer": "The circuit breaker pattern prevents cascading failures by monitoring service calls and opening the circuit when failures exceed a threshold. It has three states: closed (normal), open (blocking requests), and half-open (testing recovery).","topics": ["circuit breaker", "fault tolerance", "system design", "resilience"]},
  {"question": "What is the difference between eventual consistency and strong consistency?","answer": "Strong consistency ensures all nodes see the same data immediately, while eventual consistency allows temporary inconsistencies that resolve over time. Strong consistency is simpler but slower, while eventual consistency provides better performance and availability.","topics": ["consistency", "distributed systems", "system design", "performance"]},
  {"question": "Explain the concept of database replication.","answer": "Database replication creates copies of data across multiple servers for redundancy and performance. Master-slave replication has one master for writes and multiple slaves for reads. Replication improves availability, performance, and disaster recovery.","topics": ["database replication", "system design", "availability", "performance"]},
  {"question": "What is the difference between CDN and load balancer?","answer": "CDN (Content Delivery Network) caches static content globally to reduce latency, while load balancer distributes requests across servers. CDN is for content delivery, while load balancer is for request distribution. Both improve performance but serve different purposes.","topics": ["cdn", "load balancer", "system design", "performance"]},
  {"question": "Explain the concept of service discovery.","answer": "Service discovery allows services to find and communicate with each other dynamically. It can be client-side (client queries registry) or server-side (load balancer queries registry). Popular tools include Consul, Eureka, and etcd.","topics": ["service discovery", "microservices", "system design", "architecture"]},
  {"question": "What is the difference between blue-green deployment and rolling deployment?","answer": "Blue-green deployment switches traffic between two identical environments, while rolling deployment updates instances gradually. Blue-green is faster but requires double resources, while rolling deployment is more resource-efficient but takes longer.","topics": ["deployment", "system design", "ci/cd", "devops"]},
  {"question": "Explain the concept of rate limiting.","answer": "Rate limiting restricts the number of requests a client can make in a given time period. It protects against abuse, ensures fair usage, and prevents system overload. Common algorithms include token bucket, leaky bucket, and fixed window.","topics": ["rate limiting", "security", "system design", "performance"]},
  {"question": "What is the difference between horizontal and vertical partitioning?","answer": "Horizontal partitioning (sharding) splits data by rows across multiple databases, while vertical partitioning splits data by columns. Horizontal partitioning improves performance for large datasets, while vertical partitioning improves performance for specific queries.","topics": ["partitioning", "database", "system design", "performance"]},
  {"question": "Explain the concept of event sourcing.","answer": "Event sourcing stores all changes as a sequence of events rather than just the current state. It provides audit trails, enables temporal queries, and supports complex business logic. Event sourcing is often combined with CQRS (Command Query Responsibility Segregation).","topics": ["event sourcing", "cqrs", "system design", "architecture"]},
  {"question": "What is the difference between active-active and active-passive architecture?","answer": "Active-active has multiple active instances serving traffic simultaneously, while active-passive has one active instance and standby instances. Active-active provides better performance and availability, while active-passive is simpler and more cost-effective.","topics": ["high availability", "system design", "architecture", "disaster recovery"]}
] 
[
  {"question": "What is the difference between unit testing and integration testing?","answer": "Unit testing tests individual components or functions in isolation, while integration testing tests how multiple components work together. Unit tests are faster and more focused, while integration tests catch issues with component interactions and data flow between modules.","topics": ["unit testing", "integration testing", "testing", "software development"]},
  {"question": "Explain the concept of Test-Driven Development (TDD).","answer": "TDD is a development methodology where tests are written before the actual code. The process follows the Red-Green-Refactor cycle: write a failing test, write code to pass the test, then refactor. TDD ensures code quality and helps design better APIs.","topics": ["tdd", "test-driven development", "testing", "software development"]},
  {"question": "What is the difference between mocking and stubbing?","answer": "Mocking creates fake objects that simulate real behavior and can verify interactions, while stubbing provides predefined responses without verifying behavior. Mocks are used to test interactions, while stubs are used to isolate the unit under test.","topics": ["mocking", "stubbing", "testing", "test doubles"]},
  {"question": "Explain the concept of test coverage and its importance.","answer": "Test coverage measures how much of the code is executed by tests. It includes line coverage, branch coverage, and function coverage. High coverage doesn't guarantee quality but helps identify untested code and ensures critical paths are tested.","topics": ["test coverage", "testing", "quality assurance", "software development"]},
  {"question": "What is the difference between manual testing and automated testing?","answer": "Manual testing is performed by humans and is flexible but slow and error-prone, while automated testing uses scripts and tools for faster, repeatable execution. Automated testing is better for regression testing, while manual testing is better for exploratory and usability testing.","topics": ["manual testing", "automated testing", "testing", "quality assurance"]},
  {"question": "Explain the concept of end-to-end testing.","answer": "End-to-end testing verifies that an application works correctly from start to finish, simulating real user scenarios. It tests the complete workflow and integration between all components. E2E tests are slower but catch issues that unit tests might miss.","topics": ["end-to-end testing", "e2e", "testing", "integration"]},
  {"question": "What is the difference between black box and white box testing?","answer": "Black box testing focuses on functionality without knowing internal implementation, while white box testing examines internal logic and code structure. Black box tests are based on requirements, while white box tests are based on code coverage and internal design.","topics": ["black box testing", "white box testing", "testing", "methodology"]},
  {"question": "Explain the concept of regression testing.","answer": "Regression testing ensures that new changes don't break existing functionality. It involves re-running tests that previously passed to verify that recent changes haven't introduced new bugs. Automated regression testing is crucial for continuous integration.","topics": ["regression testing", "testing", "continuous integration", "quality assurance"]},
  {"question": "What is the difference between functional and non-functional testing?","answer": "Functional testing verifies that the application works according to requirements and specifications, while non-functional testing checks performance, security, usability, and other quality attributes. Functional tests focus on what the system does, non-functional tests focus on how well it does it.","topics": ["functional testing", "non-functional testing", "testing", "quality attributes"]},
  {"question": "Explain the concept of behavior-driven development (BDD).","answer": "BDD is a development methodology that focuses on behavior and user stories. Tests are written in natural language using Given-When-Then format. BDD bridges the gap between technical and non-technical stakeholders and ensures tests focus on business value.","topics": ["bdd", "behavior-driven development", "testing", "user stories"]},
  {"question": "What is the difference between smoke testing and sanity testing?","answer": "Smoke testing verifies that the most critical functions work after a build, while sanity testing checks if specific functionality works after a bug fix. Smoke tests are broad and shallow, while sanity tests are narrow and deep.","topics": ["smoke testing", "sanity testing", "testing", "quality assurance"]},
  {"question": "Explain the concept of performance testing.","answer": "Performance testing evaluates how a system performs under various conditions. Types include load testing (normal load), stress testing (beyond capacity), and spike testing (sudden load changes). Performance testing helps identify bottlenecks and capacity limits.","topics": ["performance testing", "load testing", "stress testing", "testing"]},
  {"question": "What is the difference between alpha testing and beta testing?","answer": "Alpha testing is performed by internal teams in a controlled environment, while beta testing is performed by external users in real environments. Alpha testing focuses on functionality and bugs, while beta testing focuses on user experience and real-world usage.","topics": ["alpha testing", "beta testing", "testing", "user acceptance"]},
  {"question": "Explain the concept of security testing.","answer": "Security testing identifies vulnerabilities and ensures the application is secure against threats. It includes penetration testing, vulnerability scanning, and security code reviews. Security testing should be integrated into the development lifecycle to catch issues early.","topics": ["security testing", "penetration testing", "vulnerability", "security"]},
  {"question": "What is the difference between positive testing and negative testing?","answer": "Positive testing verifies that the system works correctly with valid inputs, while negative testing verifies that the system handles invalid inputs gracefully. Both are important for comprehensive testing coverage.","topics": ["positive testing", "negative testing", "testing", "input validation"]},
  {"question": "Explain the concept of test automation frameworks.","answer": "Test automation frameworks provide structure and guidelines for automated testing. Popular frameworks include Selenium for web testing, JUnit for Java, and PyTest for Python. Frameworks provide reporting, parallel execution, and test organization capabilities.","topics": ["test automation", "frameworks", "selenium", "junit", "pytest"]},
  {"question": "What is the difference between test cases and test scenarios?","answer": "Test cases are specific, detailed steps to test a particular functionality, while test scenarios are high-level descriptions of what to test. Test scenarios are broader and can contain multiple test cases. Scenarios focus on user stories and business requirements.","topics": ["test cases", "test scenarios", "testing", "documentation"]},
  {"question": "Explain the concept of continuous testing.","answer": "Continuous testing integrates testing into the CI/CD pipeline, running tests automatically on every code change. It provides fast feedback and ensures quality gates are met before deployment. Continuous testing includes unit, integration, and automated acceptance tests.","topics": ["continuous testing", "ci/cd", "automation", "quality gates"]},
  {"question": "What is the difference between exploratory testing and scripted testing?","answer": "Exploratory testing is unscripted and relies on tester creativity and domain knowledge, while scripted testing follows predefined test cases. Exploratory testing is better for finding unexpected issues, while scripted testing ensures consistent coverage of known scenarios.","topics": ["exploratory testing", "scripted testing", "testing", "methodology"]},
  {"question": "Explain the concept of test data management.","answer": "Test data management involves creating, maintaining, and using appropriate data for testing. It includes data generation, data masking for privacy, and data cleanup. Good test data management ensures tests are reliable and don't interfere with each other.","topics": ["test data", "data management", "testing", "privacy"]}
] 
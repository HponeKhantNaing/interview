[
  {"question": "What is the difference between SQL and NoSQL databases?","answer": "SQL databases are relational and use structured query language, while NoSQL databases are non-relational and can store unstructured data. SQL databases are better for complex queries and ACID compliance, while NoSQL databases are better for scalability and flexibility.","topics": ["sql", "nosql", "databases", "relational", "non-relational"]},
  {"question": "Explain the concept of database normalization.","answer": "Database normalization is the process of organizing data to reduce redundancy and improve data integrity. It involves creating tables and relationships that minimize data duplication and ensure data consistency. Normalization follows specific forms (1NF, 2NF, 3NF, BCNF).","topics": ["normalization", "database design", "sql", "data integrity"]},
  {"question": "What is the difference between INNER JOIN and LEFT JOIN?","answer": "INNER JOIN returns only matching records from both tables, while LEFT JOIN returns all records from the left table and matching records from the right table. LEFT JOIN preserves all records from the left table even if there's no match in the right table.","topics": ["sql", "joins", "inner join", "left join", "database"]},
  {"question": "Explain the concept of database indexing and its benefits.","answer": "Database indexing creates data structures that improve the speed of data retrieval operations. Indexes work like book indexes, allowing the database to find data without scanning the entire table. Benefits include faster queries, but indexes require storage space and slow down write operations.","topics": ["indexing", "database", "performance", "sql"]},
  {"question": "What is the difference between a primary key and a foreign key?","answer": "A primary key uniquely identifies each record in a table and cannot be null or duplicate. A foreign key references a primary key in another table to establish relationships between tables. Foreign keys maintain referential integrity and can be null or duplicate.","topics": ["primary key", "foreign key", "sql", "database design", "relationships"]},
  {"question": "Explain the concept of ACID properties in databases.","answer": "ACID stands for Atomicity (all operations succeed or fail together), Consistency (database remains in valid state), Isolation (concurrent transactions don't interfere), and Durability (committed transactions persist). These properties ensure data integrity and reliability.","topics": ["acid", "transactions", "database", "data integrity"]},
  {"question": "What is the difference between MongoDB and MySQL?","answer": "MongoDB is a NoSQL document database that stores data in flexible JSON-like documents, while MySQL is a relational SQL database that stores data in structured tables. MongoDB is better for unstructured data and scalability, while MySQL is better for complex queries and ACID compliance.","topics": ["mongodb", "mysql", "nosql", "sql", "databases"]},
  {"question": "Explain the concept of database transactions.","answer": "A database transaction is a sequence of operations that are treated as a single unit. Transactions follow ACID properties and ensure data consistency. They can be committed (made permanent) or rolled back (undone) if an error occurs.","topics": ["transactions", "database", "acid", "sql"]},
  {"question": "What is the difference between a clustered and non-clustered index?","answer": "A clustered index determines the physical order of data in a table (only one per table), while a non-clustered index is a separate structure that points to the data. Clustered indexes are faster for range queries, while non-clustered indexes are better for specific lookups.","topics": ["indexing", "clustered index", "non-clustered index", "sql", "database"]},
  {"question": "Explain the concept of database sharding.","answer": "Database sharding is a technique for distributing data across multiple databases or servers. It improves performance and scalability by reducing the load on individual servers. Sharding can be done horizontally (by rows) or vertically (by columns).","topics": ["sharding", "database", "scalability", "performance"]},
  {"question": "What is the difference between Redis and traditional databases?","answer": "Redis is an in-memory data store that stores data in RAM for extremely fast access, while traditional databases store data on disk. Redis is used for caching, session storage, and real-time applications, while traditional databases are used for persistent storage.","topics": ["redis", "caching", "in-memory", "database"]},
  {"question": "Explain the concept of database replication.","answer": "Database replication creates copies of data across multiple servers for redundancy and performance. Master-slave replication has one master for writes and multiple slaves for reads. Replication improves availability, performance, and disaster recovery.","topics": ["replication", "database", "master-slave", "availability"]},
  {"question": "What is the difference between a view and a table in SQL?","answer": "A table stores actual data, while a view is a virtual table based on a SQL query. Views don't store data themselves but present data from underlying tables. Views can simplify complex queries, provide security, and present data in different ways.","topics": ["sql", "views", "tables", "database"]},
  {"question": "Explain the concept of database deadlocks.","answer": "A deadlock occurs when two or more transactions are waiting for each other to release locks on resources. Deadlocks can be prevented by using consistent ordering of operations, timeouts, or deadlock detection and resolution mechanisms.","topics": ["deadlocks", "transactions", "database", "concurrency"]},
  {"question": "What is the difference between ORM and raw SQL?","answer": "ORM (Object-Relational Mapping) maps database tables to programming language objects, while raw SQL involves writing SQL queries directly. ORM provides abstraction and portability but can be less efficient than optimized raw SQL for complex queries.","topics": ["orm", "sql", "database", "abstraction"]},
  {"question": "Explain the concept of database connection pooling.","answer": "Connection pooling reuses database connections instead of creating new ones for each request. It improves performance by reducing connection overhead and limits the number of concurrent connections to the database.","topics": ["connection pooling", "database", "performance", "scalability"]},
  {"question": "What is the difference between a stored procedure and a function?","answer": "A stored procedure can return multiple values and perform actions, while a function must return a single value and cannot perform actions. Functions can be used in SQL statements, while stored procedures are called separately.","topics": ["sql", "stored procedures", "functions", "database"]},
  {"question": "Explain the concept of database backup and recovery.","answer": "Database backup creates copies of data for disaster recovery, while recovery restores data from backups. Different backup types include full, incremental, and differential backups. Recovery strategies depend on business requirements and acceptable data loss.","topics": ["backup", "recovery", "database", "disaster recovery"]},
  {"question": "What is the difference between a database and a data warehouse?","answer": "A database is designed for transactional processing (OLTP), while a data warehouse is designed for analytical processing (OLAP). Data warehouses store historical data optimized for complex queries and reporting, while databases store current operational data.","topics": ["database", "data warehouse", "oltp", "olap"]},
  {"question": "Explain the concept of database optimization and query tuning.","answer": "Database optimization involves improving query performance through indexing, query rewriting, and database design. Query tuning analyzes execution plans to identify bottlenecks and optimize slow queries. Performance monitoring tools help identify optimization opportunities.","topics": ["optimization", "query tuning", "database", "performance"]}
] 